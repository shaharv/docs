Git cheat sheet
---------------

- Install latest git version                       add-apt-repository ppa:git-core/ppa && apt update && apt-get install git

- Basic git commands, files                        add, rm, mv
- Basic git commands, update                       commit, push, pull

- Pull with rebasing                               git pull --rebase

- Clone remote git database                        git clone <remote>
- Clone remote git database into specific folder   git clone <remote> <dest-folder>

- Display list of all staged and unstaged files    git status
- List all local diffs                             git diff
- List diffs from specified branch                 git diff <base-branch>
- Diff of a specific file in branch                git diff <base-branch> <file-path>
- List diffs from specified branch - filenames     git diff --name-only <base-branch>
- Show all files in a commit                       git show --name-only <commit>

- History of a specific file                       gitk filename
                                                   git log -p filename
- Summarized history                               git log --oneline
- Summarized history with date, no paging          git --no-pager log --pretty=format:"%H%x09%an%x09%ad%x09%s" --date=short
- Summarized history with date, no paging (color)  git --no-pager log --pretty=format:'%C(yellow)%H|%Cred%ad|%Cblue%an|%Cgreen%d %Creset%s' --date=short
- History for specific folders                     git log -- llvm/tools/llvm-pdbutil llvm/lib/DebugInfo/PDB
- Show only commits matching a regex               git log --grep="<pattern>"
- Show only commits from a certain person          git log --author="<pattern>"
- Show origin branches next to commits             git log --graph --decorate

- Update history of origin branch (without         git fetch
  affecting local files at all)
  
- Rename unpushed branch                           git branch -m <feature/new/name>
- Create a new branch                              git branch crazy-experiment
  (note: a branch is just a ref. to commit)
- List local branches                              git branch [-v] [-vv]
- List all branches - local and remote             git branch -a
- Delete local branch                              git branch -d <feature/to/delete>
  (note: checkout a different branch first)
- Publish new local branch                         git push --set-upstream origin <branch-name>
												   
- Show old file version of a file                  git show <revhash>:<file>
- Show commit                                      git show <revhash>

- Search for commited files                        git ls-tree -r --name-only <branch name> | grep <file pattern>

- Commit all pending changes, not adding files     git commit -a
- Overwrite last commit with a new commit          git commit --amend

- Checkout a specific git revision                 git checkout <revhash>
- Checkout a specific git revision, file           git checkout <revhash> -- <filemask>
- Checkout a specific file from another branch     git checkout <branch-name> -- <filepath>
- Fix detached head                                git checkout <branch-name>
- Branch and checkout                              git checkout -B <branch-name>
- Checkout specific files                          git checkout -- "*.cpp"
- Checkout all files under current path            git checkout .

- Stash changes                                    git stash
- Unstash the last stash                           git stash apply
- Unstash the 3rd last stash                       git stash apply stash@{2}
- Show list of stashes                             git stash list
- Show stached changes                             git stash show -p

- Remove unstaged files from folder - dry run      git clean -n
- Remove unstaged folders from folder - dry run    git clean -n -d
- Remove unstaged files from folder - for real     git clean -f

- Create a new tag                                 git tag <tag-name>
- Push a tag                                       git push origin <tag-name>
- Clean up local tags deleted from origin          git tag -l | xargs git tag -d && git fetch --tags

- Discard pending changes                          git reset
- Discard only last unpushed commit                git reset HEAD~1
- Reset local branch to its origin state           git fetch origin && git reset --hard origin/<branch>
- Revert a specific commit (place a new            git revert <id>
  commit that undo the specified commit)

- Display changes that caused HEAD update          git reflog

- Display git configuration settings               git config --list
- Configure user name                              git config --global [--replace-all] user.name "User Name"
- Configure user mail                              git config --global user.email user@domain.com
- Configure pull to merge (disable rebase)         git config --global pull.rebase false
                                                   git config --local pull.rebase false
- Allow file modes (chmod)                         git config core.fileMode false

- Merge specified branch into current branch       git merge <branch-to-merge-from>
- Abort failed merge                               git merge --abort
- Continue merge after conflicts are resolved      git merge --continue
- Merge after pulling the latest                   git pull origin <branch-to-merge-from>

- Rebase while preserving merge commits            git rebase <branch> --preserve-merges

- Cherry pick a merge commit                       git cherry-pick -m1 -x <sha1>
  (m1 is the branch we merged from,
   m2 is the branch we merged to)

- Search source code                               git grep 'search string'

- Clean up and optimize                            git gc

- Update and checkout modules                      git submodule update --init --recursive
- Clone repo with its submodules                   git clone --recursive

- Chmod file (useful for Windows partitions)       git update-index --add --chmod=-x <file-path>

- Create a fork manually (empty repo exists)       git remote add upstream https://github.com/pytorch/glow
                                                   git pull upstream master
                                                   git push origin master

- Syncing fork with upstream                       git fetch upstream && git merge upstream/master
                                                   https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/syncing-a-fork

Github
------

- Ignore whitespace in PR                           Append ?w=1 to PR link
- See all subscribed issues (commented, assigned)   https://github.com/notifications/subscriptions
- Filter according to base PR                       "is:pr is:open base:<branch-name>"
- Expand all diffs in PR (Javascript)               Array.from(document.getElementsByClassName('load-diff-button')).map(button => button.click())
- Github Redefined - browser extension              https://github.com/sindresorhus/refined-github
- Github free features                              https://github.com/pricing

Git setup tips
--------------

- First time config:
  git config --global user.name username
  git config --global user.name         # verify
  git config --global user.email user@domain.com

- Set Notepad++ as the editor for commit messages on Windows 64-bit:
  git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"
  (https://stackoverflow.com/questions/10564/how-can-i-set-up-an-editor-to-work-with-git-on-windows)

Git one-multi liners
--------------------

Display all objects in git history sorted by size:

   git rev-list --objects --all \
   | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' \
   | sed -n 's/^blob //p' \
   | sort --numeric-sort --key=2 \
   | cut -c 1-12,41- \
   | $(command -v gnumfmt || echo numfmt) --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest


Git/Github useful links
-----------------------

- Atlassian - What is Git:
  https://www.atlassian.com/git/tutorials/what-is-git
  
- Atlassian - Git cheat sheet:
  https://www.atlassian.com/git/tutorials/atlassian-git-cheatsheet  
  
- The Git book:
  https://git-scm.com/book/en/v2

- Github GitFlow:
  https://datasift.github.io/gitflow/IntroducingGitFlow.html

- git mv with history:
  https://gist.github.com/emiller/6769886

- How to send good pull requests on GitHub (Eli Bendersky's website):
  https://eli.thegreenplace.net/2019/how-to-send-good-pull-requests-on-github

