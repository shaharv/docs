LLVM tips and hacking
---------------------

Clang/LLVM:

- Print LLVM IR from clang (unoptimized) clang -S -emit-llvm
- Print LLVM IR after each pass          clang -mllvm -print-after-all
- Print MC after each pass               clang -mllvm -print-machineinstrs
- List available targets                 clang -print-targets
- Enable LLVM debug prints               clang -mllvm -debug
- Enable debug prints of specific pass   clang -mllvm -debug-only=<pass-name>
  (using the appropriate DEBUG_TYPE)
- Verify MIs for debug                   clang -mllvm -verify-machineinstrs

LLVM Scheduling:

- MachineScheduler debug prints          clang -O3 -S -mllvm -debug-only=machine-scheduler
- Print scheduling critical path         clang -O3 -S -mllvm -misched-dcpl

llc:

- Enable LLVM debug prints               llc -debug
- List available LLVM targets            llc --version
- List available CPUs per target         llc -march=hexagon -mattr=help

lit:

- Running a lit test                     bin/llvm-lit path/to/testname.cpp [options]

  lit options:
  * --threads N     Number of threads to run
  * -v              Verbose failure output
  * -a              Verbose output always
  * --filter REGEX  Run only tests matching REGEX

- Updating llc lit tests                 update_llc_test_checks.py --llc-binary $LLVM_BIN/llc <ll file(s)>
  after compiler codegen change

Useful source locations:

- The list of possible SDNodes           include/llvm/CodeGen/ISDOpcodes.h
- The list of possible Value Types       include/llvm/Support/MachineValueType.h

Useful gdb breakpoints and prints:

General:

* b report_fatal_error

Frontend:

* b Sema::ActOnGCCAsmStmt        - Inline assembly expansion

Driver:

* b ExecuteCC1Tool               - Compiler entrypoint
* b ExecuteCompilerInvocation    - Frontend entrypoint
* b ExecuteAction                - Frontend compile entrypoint
* b parseArch                    - Parse target triple

Codegen:

* b MachineFunction::CreateMachineInstr if MCID.getOpcode()==123
* b MachineInstr::MachineInstr             (see GenInstrInfo.inc for opcode enumerations)
* b BuildMI if MCID.getOpcode()==123       (--""--)
* b MCInstBuilder if Opcode==123           (--""--)
* b MCInst::setOpcode if Opcode==244       (--""--)
* p MI->dump()

Encoding/decoding:

* b PPCAsmParser::MatchAndEmitInstruction
* b PPCMCCodeEmitter::encodeInstruction
* b PPCDisassembler::getInstruction

TableGen:

* For reproducing tablegen command lines, print argv in TableGen.cpp/main:

  int main(int argc, char **argv) {
  #ifndef NDEBUG
    for (int i = 0; i < argc; i++) {
      std::cout << argv[i] << " ";
    }
    std::cout << std::endl;
  #endif

AsmParser:

* SMLoc start - the first character of the token
* SMLoc end - the first character past the token

Useful Links:

* VLIW scheduling presentation
  https://llvm.org/devmtg/2015-04/slides/EuroLLVM_2015_CodeGen_SS_VLIW.pdf

* SchedMachineModel: Adding and Optimizing a Subtarget
  https://llvm.org/devmtg/2014-10/Slides/Estes-MISchedulerTutorial.pdf
