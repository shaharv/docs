LLVM tips and hacking
---------------------

Clang:

- Print LLVM IR from clang (unoptimized) clang -S -emit-llvm
- Print LLVM IR after each pass          clang -mllvm -print-after-all
- Print MC after each pass               clang -print-machineinstrs
- List available targets                 clang -print-targets
- Enable LLVM debug prints               clang -mllvm -debug
- Enable debug prints of specific pass   clang -mllvm -debug-only=type

llc:

- Enable LLVM debug prints               llc -debug
- List available LLVM targets            llc --version
- List available CPUs per target         llc -march=hexagon -mattr=help

lit:

- Running a lit test                     bin/llvm-lit path/to/testname.cpp [options]

  lit options:
  * --threads N     Number of threads to run
  * -v              Verbose failure output
  * -a              Verbose output always
  * --filter REGEX  Run only tests matching REGEX

- Updating llc lit tests                 update_llc_test_checks.py --llc-binary $LLVM_BIN/llc <ll file(s)>
  after compiler codegen change

Useful gdb breakpoints and prints:

General:

* b report_fatal_error

Codegen:

* b BuildMI if MCID.getOpcode()==123     (see GenInstrInfo.inc for opcode enumerations)
* b MCInstBuilder if Opcode==123         (--""--)
* b MCInst::setOpcode if Opcode==244     (--""--)
* p MI->dump()

Encoding/decoding:

* b PPCAsmParser::MatchAndEmitInstruction
* b PPCMCCodeEmitter::encodeInstruction
* b PPCDisassembler::getInstruction

TableGen:

* For reproducing tablegen command lines, print argv in TableGen.cpp/main:

  int main(int argc, char **argv) {
  #ifndef NDEBUG
    for (int i = 0; i < argc; i++) {
      std::cout << argv[i] << " ";
    }
    std::cout << std::endl;
  #endif
