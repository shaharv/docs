GDB cheat sheet
---------------

Execute:

- Load executable                         $ gdb /path/to/exec
- Load executable with arguments          $ gdb --args /path/to/exec arg1 arg2

Basics:

- Run                                     r
- Continue                                c
- Show source code                        l
- Single step                             s
- Step out                                finish
- Step over                               n

Breakpoints:

- Place breakpint                         b <location>
- Break on all functions matching regex   rb <regexp>
- Break on all functions in a file        rb <file.cpp>:.*
- Delete breakpoint #N                    d <N>
- Delete all breakpoints                  d
- Conditional breakpoint                  b <location> if <expression>
- List breakpoints                        info b
- Add watchpoint                          watch <expression>

Variables:

- Print variable value                    p 'var'

Source:

- Set source files location               directory <path>
- Show function code                      list <function name>

Registers:

- Print register value (example: eax)     info registers eax
- Print all register values               info registers

Disassemble:

- Show disasm. of function                disassemble [func]
- Show 50 instructions starting ADDR      x/50i 0xADDR

Call stack:

- Show current function                   f
- Show stack traces of all threads        thread apply all where
- Show call stack                         where
- Move N places up the stack              up <N>
- Move N places down the stack            down <N>
- Show threads information                info threads

Signals:

- Break on any signal                     catch signal all
- Show the address where SIGSEGV occured  p $_siginfo._sifields._sigfault.si_addr
- Ignore specific signal                  handle SIGUSR1 nostop noprint pass

Modify:

- Set variable                            set variable VAR=VAL
- Patch code address with "nop"           set {unsigned char}ADDR=0x90
- Patch code address with "retq"          set {unsigned char}ADDR=0xC3

Misc:

- Attach to process                       attach <pid>
- Pid of debugged process                 info inferior
- Show all memory mappings (sections)     info proc mappings
- Follow forked child process             set follow-fork-mode child
- Set debug file folder                   set debug-file-directory /usr/lib/debug


Debugging PPC QEMU programs
---------------------------

For debugging PPC programs running on QEMU, gdb must be built with --target=powerpc-linux.
See http://www.ultsol.com/pdfs/Tool_Talk_03-001-Using-GDB-for-PowerPC.pdf

1) Start QEMU: qemu-ppc -g 9000 ./a.out
   -g is for starting gdb, listening to port 9000

2) (gdb) target remote :9000
   (gdb) file /path/to/a.out
   (gdb) b main
   (gdb) c


Reverse debugging
-----------------

CppCon 2016: Greg Law "GDB - A Lot More Than You Knew"
https://www.youtube.com/watch?v=-n9Fkq1e6sg

Run program repeatedly in gdb until it fails:
- b main
- b _exit
- command 1 // record commands for breakpoint 1 (main)
  > record
  > continue
  > end
- command 2 // record command for breakpoint 2 (_exit)
  > run
  > end
- When program failed:
  reverse-step  // source step back
  reverse-stepi // assembly step back


Useful Links
------------

- LLDB GDB comparison:
  http://lldb.llvm.org/lldb-gdb.html

- GDB Technion course:
  http://tx.technion.ac.il/doc/intel13/debugger/gdb/gdb.pdf

- TrinityCore GDB guidelines:
  https://trinitycore.atlassian.net/wiki/display/tc/GDB

- GDB Wiki FAQ:
  https://sourceware.org/gdb/wiki/FAQ

- Building and installing GDB:
  https://ftp.gnu.org/old-gnu/Manuals/gdb/html_chapter/gdb_27.html

- GDB dashboard (gdbinit):
  https://github.com/cyrus-and/gdb-dashboard

- Alpine Linux GDB build steps:

  * find -name "config.cache" -delete
  * apk add texinfo bison flex
  * ./configure --disable-werror

- Loading multiple symbol files in gdb:
  https://stackoverflow.com/questions/20380204/how-to-load-multiple-symbol-files-in-gdb

- Debugging stripped binaries:
  https://felix.abecassis.me/2012/08/gdb-debugging-stripped-binaries

- GDB cheat sheet:
  https://darkdust.net/files/GDB%20Cheat%20Sheet.pdf

- GDB signals:
  https://sourceware.org/gdb/onlinedocs/gdb/Signals.html

- GDB internals:
  https://sourceware.org/gdb/wiki/Internals

- Debugging the JDK with GDB:
  https://neugens.wordpress.com/2015/02/26/debugging-the-jdk-with-gdb

- How to use GDB to find what function a memory address corresponds to?
  https://stackoverflow.com/questions/7639309/how-to-use-gdb-to-find-what-function-a-memory-address-corresponds-to

- QEMU remote debugging
  https://rust-embedded.github.io/book/start/qemu.html
