Ubuntu cheat sheet
------------------

Basics:

- Back to previous folder                 cd -
- Set env. variable with global scope     export VAR=VAL
- Display env. variable                   echo $VAR
- Show running shell                      echo $0
- Print all env. variables                printenv
- Exit code of last command               echo $?
- Search recent shell commands            Ctrl + R
- Make shell exit on error                set -e (set +e to revert)
- Make shell echo executed commands       set -x (set +x to revert)
- Bash "strict mode"                      set -euo pipefail
- Run script in the same shell env.       . script.sh
- Change languague                        Super key [Windows Key] + Space
- Redirect stdout and stderr to file      cmd >log.txt 2>&1
- Quick copy                              Shift + Ctrl + C
- Quick paste                             Shift + Ctrl + V
- sudo with inherited env. vars           sudo -E <cmd>
- Run GUI program as root                 gksudo <cmd>

Folders:

- Remove a non-empty folder               rm -rf <folder-name>
- Copy folder                             cp -r <src> <dst>
- Copy folder with specific files         cd $dir; find . -name '*.txt' | cpio -pdm $target_dir
- Visualize tree structure                tree
- Open current folder in Ubuntu GUI       nautilus .

Files:

- Get the type of a file                  file <filename>
- Get the type of function/alias          type <alias>
- Get the full path of a file             realpath <filename>
- Create a symbolic link                  ln -s <link from> <link name>
- Batch rename                            rename -v 's/something//' *.txt
- Recursive dos2unix                      find . -type f -print0 | xargs -0 dos2unix
- Read and wait for input                 less file.txt # then, shift+f
- Change file/dir ownership recursively   chown -R <user>:<group> <dir>
- List files sorted by date               ls -lth

Finding files:

- Locate a file, first in PATH:           whereis <filename>
- Locate all files matching wildcard      locate <filename>
- Find a file in folder hierarcy          find . -name "wildcard"
- Find files with several wildcards       find -type f \( -name "*.ext1" -o -name "*.ext2" \)
- Find folders created today              find . -mtime -1 -type d -print | grep -v "^.$"
- Find files and display dates            find -name "*abc*" -exec stat -c "%n %y" {} \
- Find and copy                           find -name "*.jar" -exec cp "{}" dest-path \;
- Find files excluding specific subfolder find "root_folder" -type d -name "folder_to_exclude" -prune -o -type f -print

Searching in files:

- Search recursively in all files         grep -r "string"
- List files matching an expression       grep -l "expr" * (or --files-with-match)
- List files NOT matching an expression   grep -L "expr" * (or --files-without-match)
- Search string in specific file types    find . -type f -name '*.cpp' | xargs grep "string"
- Count "-o" in all commands files        ls commands*.txt | xargs grep '^\-o' | count 1
- Grep results with sorrounding context   cat file.txt | grep icudt55_dat -B 10 -A 20
- Search numbers with X digits            grep 'heap: ([0-9]\{11\}B' *.log
- Grep w/o color (disable ANSI output)    grep --color=never ...
- Search replace in files                 find \( -name "*.h" -or -name "*.cpp" \) -exec sed -i 's/2022/2023/g' {} +
- Detect trailing whitespace              ! grep -rnI '[[:blank:]]$' <DIR> || (echo "Trailing whitespace found!" && false)

Binary inspection:

- Search objects for debug symbol         find . -name "*.o" -exec nm -A {} \; | grep "_foo"
- Search .so for dynamic symbol           objdump -T lib.so | grep sym
- Binary to text                          od -t x1 a.out
- Binary to text, bytes, formatted        od -t x1 -w24 -v a.out
- Read rpath setting of executable        readelf -d <executable> | grep 'R.*PATH'
- Patch rpath in executable               chrpath -r "\$\ORIGIN/path/to/library" <executable>

Disk usage:

- Disk usage of current folder            du -sh
- Disk usage of each file                 du -sh *
- Summary of disks and free space         df -h
- Display filesystem type as well         df -Th
- Display filesystem of folder            df -Th <path>
- Free disk space on current partition    df --output=avail .
- Sizes of all files of type, recursive   du -ab . | grep cpp$ | sort -n
- Ubuntu Disk Usage Analyzer              baobab
- NCurses Disk Usage Analyzer             ncdu
- Empty the bin                           trash-empty (requires trash-cli)
- Junk cleaner                            sudo bleachbit
- Package manager                         synaptic
- Cleanup - system journal - keep 100M    sudo journalctl --vacuum-size=100M
- Cleanup - snapd cache                   sudo rm /var/lib/snapd/cache/*

Text processing:

- Remove blank lines from file            sed -i '/^\s*$/d' file.txt
- Remove N=123 lines after a match        sed -i '/my-regex/,+123d' file.txt
- Remove trailing spaces                  sed -i 's/ *$//' file.txt
- Perl as sed                             perl -pe "s/^\w+\s+//"
- Convert epoch to local time (Windows)   perl -pe "s/([\d]{10})/localtime $1/eg;" inp.txt
- Convert epoch to local time (Linux)     perl -pe 's/([\d]{10})/localtime $1/eg;' inp.txt
- Sort text by string length              perl -e 'print sort { length($a) <=> length($b) } <>' inp.txt
- Replace C++ comments with C comments    sed -ie 'sX// *\(.*[^ ]\) *$X/* \1 */X' text-file

Process management:

- Interactive system stats                top, htop
- Process info in batch mode              top -b -p `pidof some_running_process`
- nmon monitoring tool - CPU and more     nmon
- Killing a process                       kill <pid>
- Kill process by name                    pkill java*
- Get process PID                         pidof <pname>
- List processes by name                  ps -ef | grep myprog
- Get pid's of processes matching regexp  ps -ef | grep 'java -agentpath:' | perl -pe "s/^\w+\s+//" | perl -pe "s/\s+.*$//" | head -n -1
  * ps -ef is more portable than ps aux
- Max mem usage by process                /usr/bin/time --format='(%Xtext+%Ddata %Mmax)' <command>
- Process running time                    ps -o etime= -p <pid>
- Process thread count                    ps -o thcount <pid>
- Thread count for all processes          ps -e -o pid,comm,cputime,thcount
- Give time out to shell sub processes    ulimit -t <seconds>
- Run ulimit as su (ulimit is sh builtin) sudo sh -c "ulimit -c unlimited"
- Process using port                      fuser <PORT-NUM>/tcp
- Process using port (2)                  lsof -i tcp:<PORT-NUM>

System:

- Linux distro version (1)                cat /etc/os-release | grep PRETTY_NAME | sed 's/^.*=//'
- Linux distro version (2)                lsb_release -a
- Linux distro version (3)                cat /proc/version
- Linux distro version (4) - codename     lsb_release -cs
- CPU info                                lscpu
- CPU number of cores (1)                 nproc --all
- CPU number of cores (2)                 cat /proc/cpuinfo | grep "physical id" | sort -u | wc -l
- Linux kernel version                    uname -r
- System info - abbreviated summary       inxi
- System info - detailed summary          inxi -Fxz
- Show free memory                        free -h / -b
- Detailed memory stats                   cat /proc/meminfo
- Restart machine                         sudo reboot
- Show all running services               service --status-all
- Show system uptime                      uptime
- Check filesystem                        sudo e2fsck -fv /dev/sdX
- Check HD for bad blocks                 sudo fsck -c /dev/sdX
- Machine endianess (BE = 256, LE = 1)    printf '\1' | od -dAn
- Currently held file locks               sudo lslocks -u
- Find which process is locking a file    fuser <path-to-file>
- Inspect disks                           lsblk
- Memory consumption by process           ps -eo user,pid,ppid,cmd,pmem,rss --no-headers --sort=-rss | awk '{if ($2 ~ /^[0-9]+$/ && $6/1024 >= 1) {printf "PID: %s, PPID: %s, Memory Consumed (RSS): %.2f MB, Command: ", $2, $3, $6/1024; for (i=4; i<NF; i++) printf "%s ", $i; printf "\n"}}'
                                          Source: https://www.golinuxcloud.com/check-memory-usage-per-process-linux

KVM:

- Check for kvm support                   kvm-ok
- Allow kvm as non sudo                   sudo chmod 666 /dev/kvm

Boot:

- Disable secure boot (for VirtualBox)    sudo mokutil --disable-validation
- Re-enable secure boot                   sudo mokutil --enable-validation

Permissions:

- Read+write permissions to me only       chmod 400 file
- Give execute permission                 chmod +x file
- The Chmod Calculator                    https://chmod-calculator.com

Date and time:

- Disable auto time update                timedatectl set-ntp 0
- Enable auto time update                 timedatectl set-ntp 1
- Set date â€“ example                      sudo date -s "30 OCT 2016 18:00:00"
- Seconds since the epoch (1/1/1970)      date +%s
- Date in DD/MM/YY format                 date +%D
- Date and time                           date '+%D %T'

Network:

- Network status                          nmcli dev show
- IP address                              apt install iproute2 && ip addr show
- MAC address                             ifconfig | grep Hwaddr
- Active internet connection              netstat -tan
- Check site accessibility (example)      curl -i localhost:9072/ibm/console
- Speed of transfers                      sudo iftop
- Open ports                              sudo netstat -ntlp | grep LISTEN
- Restart network connection              sudo service network-manager restart
- Restart SSHD service                    sudo pkill sshd

Build:

- Make: verbose build (any make impl.)    make SHELL='sh -x'
- Make: verbose build (GNU make)          make VERBOSE=1
                                          make V=1
- Ninja: list all buildable targets       ninja -t targets all
- LLVM/Clang: install from package        sudo apt-get install clang-9 libstdc++-9-dev
- LLVM/Clang: install latest              sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"
- Check libstdc++ version                 strings /usr/lib/x86_64-linux-gnu/libstdc++.so.6 | grep LIBCXX
- Check libstdc++ version (2)             ls -l /usr/lib/x86_64-linux-gnu/libstdc*
- Upgrade libstdc++                       sudo apt upgrade libstdc++6
- Downgrade libstdc++ back                sudo apt install libstdc++6=<ver>

Linking:

- Find library reachable by ld            ldconfig -p | grep <libname>
- Find library used in processes          sudo grep libMy.so /proc/*/maps

Profiling:

- Perf basic CPU stats                    sudo perf stat <command>
- Perf detailed CPU stats                 sudo perf stat -d <command>
- Perf cache events                       sudo perf stat -e cache-references,cache-misses <command>
- Perf list available event types         sudo perf list
- Perf with call graph                    sudo perf record --call-graph dwarf -g -p $(pgrep <name>)
- Perf examples and cheat sheet           http://www.brendangregg.com/perf.html
- Visualize perf data                     https://github.com/KDAB/hotspot

Transferring files:

- Download file from URL (1)              wget <url>
- Download file from URL (2)              curl -O <url>
- Copy remote files                       scp [-P port] src dst    [ Example: scp foo.txt user@server.com:/tmp ]
- Copying text to clipboard               xsel --clipboard < somefile
- Copy binary file to clipboard           xclip-copyfile <file.bin>
- Paste binary file from clipboard        xclip-pastefile

Desktop:

- Add a desktop shortcut                  gnome-desktop-item-edit --create-new ~/Desktop
  (prerequisite)                          sudo apt-get install --no-install-recommends gnome-panel

Connecting and working on remote machine:

- Connect to a server                     ssh [-p port] user@server.com
- New screen                              screen -d -R <name>
- Connect to existing screen              screen -x <name>
- Create a named tmux session             tmux new -s <sessionName>
- Attach to a tmux session                tmux attach-session -t <sessionNameOrNumber>
- Kill tmux session                       tmux kill-session -t <sessionNameOrNumber>
- List tmux sessions                      tmux ls

Monitor and graphics:

- Screen brightness (example)             xbacklight +50
- Screen contrant (example)               xrandr -gamma 0.5
- List display drivers                    lspci -k | grep -EA3 'VGA|3D|Display'

Sound:

- No sound from headphones (1)            alsactl restore
- No sound from headphones (2)            sudo alsa force-reload
- No sound from headphones (3) + reboot   killall pulseaudio; rm -rf ~/.config/pulse/*; rm -rf ~/.pulse*; reboot
- Display installed sound cards           aplay -l
- "Top five wrong ways to fix your audio" http://voices.canonical.com/david.henningsson/2012/07/13/top-five-wrong-ways-to-fix-your-audio/
- Ubuntu SoundTroubleshootingProcedure    https://help.ubuntu.com/community/SoundTroubleshootingProcedure

Compression:

- Compress a single file/folder (GNU tar) tar -cvzf archive.tar.gzÂ /fullpath/to/folder-or-file
- Compress a single folder (zip)          zip -r zipname foldername/*
- Compress a list of files                find -name "*.log" | zip logs.zip -@
- Unzip all zip files into current dir    for file in `ls *.zip`; do unzip $file; done
- Unzip all zip files into seperate dirs  for file in `ls *.zip`; do unzip $file -d `echo $file | cut -d . -f 1`; done
- Extract rpm                             rpm2cpio myinstaller.rpm | cpio -idmv
- Extract gz                              gunzip file.gz
- Extract xz                              unxz file.xz

Troubleshooting:

- Get system calls trace for a process    strace <command>
- Enter virtual console                   Ctrl + Alt + F1
- Exit virtual console, back to desktop   Ctrl + Alt + F7
- Possible locations for coredumps        /var/lib/apport/coredump
                                          /var/lib/systemd/coredump
                                          /var/crash
                                          cat /proc/sys/kernel/core_pattern

Useful Utilities:

- Paritition mangement                    gparted
- Unity tweaker                           unity-tweak-tool

Source Code Formatting:

- Format with astyle, inplace             astyle --suffix=none path/to/file.cpp
- Format with astyle, inplace, recursive  astyle --suffix=none -r "./tree/root/*.cpp"
- Format with astyle, with backup         astyle path/to/file.cpp
- Useful astyle parameters                --indent=force-tab --indent-preproc-cond --indent-after-parens --indent-continuation=1

Administration:

- See logged in users                     w

Graphviz:

- Convert dot file to pdf                 dot -Tpdf graph1.dot -o graph1.pdf

VSCode:

- Kill all running VSCode process         killall node
  (assuming no other node apps)

Misc:

- Display image                           xdg-open <image.jpg>
- Hexadecimal text to binary              xxd -r -p input.txt output.jar
- Random 64 hexadecimal bytes             xxd -l "64" -p /dev/urandom | tr -d " \n" ; echo
- Binary to hex text, 8 bytes at a time   cat my.bin | xxd -g 8 -c 8 -p | tr a-x A-Z
- hex2dec                                 echo $(( 16#<Hex constant> ))
- MD5 sum of a file                       md5sum <filename>
- SHA256 sum of a file                    sha256sum <filename>
- Create 1MB binary file filled with 0's  dd if=/dev/zero of=out.bin count=1 bs=1MB
- Create 1MB binary file filled randomly  dd if=/dev/urandom of=out.bin count=1000 bs=1000
- Create 1MB text file with random text   base64 /dev/urandom | head -c 1000000 > out.txt
- Count class files in jar                unzip -l my.jar | grep \.class | wc -l
- Count source lines                      sloccount --multiproject
  * Note: found sloccount as most reliable comparing to cloc, ohcount
- Get glibc version (1)                   ldd --version | grep GLIBC
- Get glibc version (2)                   apt-cache policy libc6
- Get glibc version (3)                   strings /usr/lib/x86_64-linux-gnu/libstdc++.so.6 | grep GLIBCXX
- Get pthreads implementation (glibc)     getconf GNU_LIBPTHREAD_VERSION
- Loop on command until fails             while true; do <cmd>; sleep <sec>; done
- Run tidy + fix errors                   run-clang-tidy-11.py -checks readability-identifier-naming -fix foo.cpp
  (requires compile_commands.json)
- Shrink qemu qcow2 image - remove        qemu-img convert -c -O qcow2 source.qcow2 shrunk.qcow2
  sparse space
- Remove unused filesystem blocks -       fstrim -av
  shrink QEMU image
